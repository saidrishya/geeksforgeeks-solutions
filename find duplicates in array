/*
Given an array A[], Your task is to complete the function printDuplicates which prints the duplicate elements of the given array. If no 
duplicate element is found  print -1.

Note: Auxiliary Space must be O(1) and Time complexity must be O(n).

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer N
which denotes number of elements of Array. Second line of each test case contains N space separated integers denoting elements of Array A[].


Output:
Print the duplicate elements from the array.The order of the output should be as the element found to be repeated.

Constraints:
1<=T<=100
1<=N<=50
0<=A[]

Example:
Input:
2
4
0 3 1 2
5
2 3 1 2 3 
Output:
-1
2 3 
*/


void printDuplicates(int arr[], int n)
{
int c = 1;
  for(int i = 0; i < n; i++)
   {
   int ind = arr[i] % n;
   arr[ind] += n;

   if(arr[ind]/n == 2)
   {
   cout << ind << " ";
   c = 0;

    }
}

if(c)
cout << "-1";
}


//second method 
vector<int> duplicates(int arr[], int n) {
        map<int, int> m;
        vector<int> v;
        
        for(int i = 0; i < n; i++){
            ++m[arr[i]];
            if(m[arr[i]] > 1 && m[arr[i]] <3){
                v.push_back(arr[i]);
            }
        }
        
        if(v.size() < 1){
            v.push_back(-1);
        }
           //v.push_back(-1);
        
        return v;
    }
